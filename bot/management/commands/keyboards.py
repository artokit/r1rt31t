from aiogram.types import *
from asgiref.sync import sync_to_async

from bot.management.commands.lang_middleware import i18n
from bot.models import City, Product, Pack, TypeOfBuy

_ = i18n.gettext


def get_start(lang=None):
    start = ReplyKeyboardMarkup(resize_keyboard=True)
    start.add(
        KeyboardButton(_('–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥', locale=lang)),
        KeyboardButton(_('–í–∏—Ç—Ä–∏–Ω–∞', locale=lang)),
        KeyboardButton(_('–û—Ç–∑—ã–≤—ã', locale=lang)),
    )
    start.add(
        KeyboardButton(_('–ü—Ä–æ—Ñ–∏–ª—å', locale=lang)),
        KeyboardButton(_('–ö–æ–Ω—Ç–∞–∫—Ç—ã', locale=lang)),
        KeyboardButton(_('–î–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç—É', locale=lang)),
    )
    start.add(
        KeyboardButton(_('–ú–æ–∏ –∑–∞–∫–∞–∑—ã', locale=lang)),
        KeyboardButton(_('–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞', locale=lang)),
        KeyboardButton(_('–ü—Ä–æ–º–æ-–∫–æ–¥', locale=lang)),
    )
    return start


lang_select = InlineKeyboardMarkup()
lang_select.row(InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫", callback_data='select_lang:ru'))
lang_select.row(InlineKeyboardButton("üá¨üá™ ·É•·Éê·É†·Éó·É£·Éö·Éò ·Éî·Éú·Éê", callback_data='select_lang:ka'))
lang_select.row(InlineKeyboardButton("üá∫üáø o'zbek tili", callback_data='select_lang:uz'))


def get_profiles_buttons():
    profile_buttons = InlineKeyboardMarkup()
    profile_buttons.row(InlineKeyboardButton(_("–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º"), callback_data='change_nickname'))
    profile_buttons.row(InlineKeyboardButton(_("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"), callback_data='add_balance'))
    profile_buttons.row(InlineKeyboardButton(_("–ü–æ–∫–∞–∑–∞—Ç—å –∫—É–ø–æ–Ω—ã"), callback_data='get_coupons'))
    profile_buttons.row(InlineKeyboardButton(_("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç"), callback_data='add_bot'))
    profile_buttons.row(InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫/Change language", callback_data='change_language'))

    return profile_buttons


def cancel_button():
    keyboard = InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton(_("–û—Ç–º–µ–Ω–∞"), callback_data='cancel'))
    return keyboard


def how_add_bot():
    keyboard = InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton(_("–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞?"), callback_data="how_add_bot"))
    return keyboard


def get_site_button():
    site_button = InlineKeyboardMarkup()
    site_button.add(InlineKeyboardButton(_('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç'), url='https://kaifshop.biz/login'))
    return site_button


async def select_city():
    keyboard = InlineKeyboardMarkup()

    for i in await sync_to_async(list)(City.objects.all()):
        keyboard.row(InlineKeyboardButton(i.name, callback_data=f'city:{i.pk}'))

    return keyboard


async def product_keyboard(products: list[Product]):
    keyboard = InlineKeyboardMarkup()

    for i in products:
        keyboard.row(InlineKeyboardButton(i.name, callback_data=f'prod:{i.pk}'))
    return keyboard


def get_more_info(prod_id):
    keyboard = InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã', callback_data=f"get_comments:{prod_id}"))
    return keyboard


def get_areas_keyboard(areas: set, prod_id: int):
    keyboard = InlineKeyboardMarkup()
    for i in areas:
        keyboard.row(InlineKeyboardButton(i, callback_data=f'area:{i}:{prod_id}'))
    return keyboard


def get_pack_keyboard(packs: list[Pack], prod_id: int, usd_course: float, area_id: int):
    keyboard = InlineKeyboardMarkup()

    for pack in packs:
        keyboard.row(
            InlineKeyboardButton(
                f'{pack.weight}–≥—Ä: üá∑üá∫ %.2f RUB, üá∫üá∏ %.2f USD' %
                (round(pack.price, 2), round(pack.price / usd_course, 2)),
                callback_data=f'pack:{prod_id}:{pack.pk}:{area_id}'
            )
        )

    return keyboard


def get_freshness_keyboard(freshness: list, prod_id: int, pack_id: int, area_id: int):
    keyboard = InlineKeyboardMarkup()

    for i in freshness:
        keyboard.row(InlineKeyboardButton(i.name, callback_data=f'fresh:{prod_id}:{pack_id}:{i.pk}:{area_id}'))

    return keyboard


def get_type_of_buy_keyboard(types: list[TypeOfBuy], prod_id: int, fresh_id: int, pack_id: int, area_id: int):
    keyboard = InlineKeyboardMarkup()

    for i in types:
        keyboard.row(InlineKeyboardButton(
            i.name,
            callback_data=f'final:{prod_id}:{fresh_id}:{pack_id}:{area_id}:{i.pk}')
        )

    return keyboard


def method_of_pays(amount):
    keyboard = InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton(_('–û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞'), callback_data=f'pay_money_from_balance:{amount}'))
    keyboard.row(InlineKeyboardButton('Bitcoin', callback_data=f'pay_of_money:bitcoin:{amount}'))
    keyboard.row(InlineKeyboardButton('Litecoin', callback_data=f'pay_of_money:litecoin:{amount}'))
    keyboard.row(InlineKeyboardButton('üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É', callback_data=f'pay_of_money:card:{amount}'))
    return keyboard


def add_b():
    keyboard = InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton(_("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"), callback_data='add_balance'))
    return keyboard


def card_add():
    keyboard = InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton(text=_('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂'), callback_data='check_payment_card'))
    keyboard.row(InlineKeyboardButton(text=_('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'), callback_data='cancel_payment'))
    return keyboard


def cancel_exc():
    keyboard = InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton(text=_('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'), callback_data='cancel_exc'))
    return keyboard


def crypt_keyboard_payment(type_of_payment):
    keyboard = InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton(text=_("–ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã"), callback_data=f'qr_code:{type_of_payment}'))
    keyboard.row(InlineKeyboardButton(text=_('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'), callback_data='cancel_payment'))
    return keyboard


def comments_keyboard(current_page: int, last_page: int):
    keyboard = InlineKeyboardMarkup()
    buttons = []

    if current_page != 1:
        buttons.append(InlineKeyboardButton(text=_('–ü—Ä–µ–¥.'), callback_data=f'comments_page:{current_page-1}'))

    if current_page != last_page:
        buttons.append(InlineKeyboardButton(text=_('–°–ª–µ–¥.'), callback_data=f'comments_page:{current_page+1}'))

    keyboard.row(*buttons)
    return keyboard
