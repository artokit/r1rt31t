import math
import os.path
import random
from aiogram.utils import markdown
from asgiref.sync import sync_to_async
from aiogram.dispatcher import FSMContext
from django.core.management.base import BaseCommand
from bot.management.commands.lang_middleware import i18n
from bot.models import *
from aiogram import executor
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery
from bot.management.commands import keyboards
from kaif.settings import dp
import requests
from kaif import states
# from .parser import *


LANGUAGES = ['ru', 'ka', 'uz']
_ = i18n.gettext
USD_COURSE = 89
BTC_COURSE = 3_758_800
LTC_COURSE = 6146
CHECKER_I18N = (lambda msg, text: msg.text in [_(text, locale=i) for i in LANGUAGES])


HELLO_TEXT_PATH = os.path.join(os.path.dirname(__file__), 'hello.txt')
CRYPTO_PAYMENTS = PaymentCrypto.objects.all()
PAYMENTS = [i.title for i in CRYPTO_PAYMENTS]


def get_course_usd():
    # ltc_courses = requests.get('https://apirone.com/api/v2/ticker?currency=ltc', headers={'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 YaBrowser/23.11.0.0 Safari/537.36'}).json()
    # rub = ltc_courses['rub']
    # usd = ltc_courses['usd']
    # return rub / usd
    return USD_COURSE


def get_ltc_course(rub_amount):
    return rub_amount / LTC_COURSE


def get_btc_amount(rub_amount):
    return rub_amount / BTC_COURSE


def get_course(count_of_money):
    if count_of_money:
        ltc_course = requests.get('https://apirone.com/api/v2/ticker?currency=ltc').json()['rub']
        btc_course = requests.get('https://apirone.com/api/v2/ticker?currency=btc').json()['rub']
        return {
            'rub': count_of_money,
            'btc': round(count_of_money / btc_course, 8),
            'ltc': round(count_of_money / ltc_course, 8)
        }
    return {i: 0 for i in ['rub', 'btc', 'ltc']}


@dp.message_handler(commands=['start'], state='*')
async def start(message: Message, state: FSMContext):
    await state.reset_data()
    await state.finish()

    with open(HELLO_TEXT_PATH, 'rb') as f:
        text = f.read().decode()
        await message.answer(
            text,
            reply_markup=keyboards.get_start(),
            parse_mode='markdown'
        )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫/Choose language", reply_markup=keyboards.lang_select)


@dp.callback_query_handler(lambda call: call.data.startswith('select_lang'))
async def select_lang(call: CallbackQuery):
    lang = call.data.split(':')[1]
    await change_lang(call.message.chat.id, lang)
    await call.message.answer(_('–Ø–∑—ã–∫ –±–æ—Ç–∞ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π!', locale=lang), reply_markup=keyboards.get_start(lang))


@dp.message_handler(lambda msg: CHECKER_I18N(msg, '–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞'))
@dp.message_handler(lambda msg: CHECKER_I18N(msg, "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"))
async def my_orders(message: Message):
    await message.answer(_('–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫'))


@dp.message_handler(lambda msg: CHECKER_I18N(msg, '–í–∏—Ç—Ä–∏–Ω–∞'))
async def goods(message: Message):
    city = await City.objects.aget(name='–ú–æ—Å–∫–≤–∞')
    products = await sync_to_async(list)(Product.objects.filter(city=city))

    await message.answer(
        _("–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥") + f" *{city.name}*",
        parse_mode='markdown',
    )

    await message.answer(
        _('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞') + f'–≥.{city.name}',
        reply_markup=await keyboards.product_keyboard(products)
    )


@dp.message_handler(lambda msg: CHECKER_I18N(msg, '–ü—Ä–æ–º–æ-–∫–æ–¥'))
async def get_text_helper_code(message: Message):
    await message.answer(
        _('–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `/promo XXXXX`, –≥–¥–µ –•–•–•–•–• - –ø—Ä–æ–º–æ-–∫–æ–¥, '
          '–∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.'),
        parse_mode='markdown'
    )


@dp.message_handler(Text(startswith='/promo'))
async def promo(message: Message):
    await message.answer(_('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.'))


@dp.message_handler(lambda message: CHECKER_I18N(message, '–ö–æ–Ω—Ç–∞–∫—Ç—ã'))
async def get_contacts(message: Message):
    await message.answer('–ö–æ–Ω—Ç–∞–∫—Ç—ã\n\n[@Help_Tigr](https://t.me/+18492015901)', parse_mode='markdown')


@dp.message_handler(lambda message: CHECKER_I18N(message, '–î–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç—É'))
async def access_to_site(message: Message):
    login = f'_tg{message.chat.id}'
    random.seed(message.chat.id)
    letters = list('qwertyuioasdfghjklzxcvbnm1234567890')
    password = ''.join(random.choices(letters, k=8)).upper()
    await message.answer(
        _("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∞–π—Ç—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ https://kaifshop.biz –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "
          "—Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:").replace('https://kaifshop.biz', '`https://kaifshop.biz`') + '\n\n' +
        _("–õ–æ–≥–∏–Ω") + f': `{login}`\n' +
        _("–ü–∞—Ä–æ–ª—å") + f': `{password}`\n\n' +
        "_" + _('–ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å VPN –∏–ª–∏ TOR.') + "_",
        parse_mode='markdown',
        reply_markup=keyboards.get_site_button()
    )


@dp.message_handler(lambda message: CHECKER_I18N(message, '–ü—Ä–æ—Ñ–∏–ª—å'))
async def get_profile_info(message: Message):
    user = await TelegramUser.objects.aget(user_id=message.chat.id)
    profile_user = _("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è") + '\n\n'
    nickname = markdown.bold(_("–ù–∏–∫–Ω–µ–π–º") + ": ") + markdown.text(user.nickname) + '\n'
    login = markdown.bold(_("–õ–æ–≥–∏–Ω") + ': ') + markdown.text(f"\_tg{message.chat.id}\n")
    balance = markdown.bold(_("–ë–∞–ª–∞–Ω—Å" + ": ")) + markdown.text(f"{int(user.balance)}RUB\n")
    count_of_orders = markdown.bold(_("–ó–∞–∫–∞–∑–æ–≤") + ": ") + "0 \(0\.00RUB\)\n"
    average_check = markdown.bold(_("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫") + ": ") + "0\.00RUB\n"
    comments = markdown.bold(_("–û—Ç–∑—ã–≤–æ–≤") + ": ") + markdown.text("0\n")
    sale = markdown.bold(_("–°–∫–∏–¥–∫–∞") + ": ") + markdown.text("0%\n")
    language = markdown.bold(_("–Ø–∑—ã–∫") + ": ")

    if user.lang == "ru":
        language += "üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫"

    if user.lang == "ka":
        language += "üá¨üá™ ·É•·Éê·É†·Éó·É£·Éö·Éò ·Éî·Éú·Éê"

    if user.lang == 'uz':
        language += "üá∫üáø O ªzbek tili"

    await message.answer(
        profile_user + nickname + login + balance + count_of_orders + average_check + comments + sale + language,
        parse_mode='markdownv2',
        reply_markup=keyboards.get_profiles_buttons()
    )


@dp.callback_query_handler(lambda call: call.data == 'get_coupons')
async def get_coupons(call: CallbackQuery):
    await call.message.answer(_("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤"))


@dp.callback_query_handler(lambda call: call.data == 'add_bot')
async def add_bot(call: CallbackQuery):
    await call.message.answer(
        _(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤\n\n"
            "–í–æ –∏–∑–±–µ–∂–∞–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ—Ç–æ–≤, –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ –∏ –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞–≥–∞–∑–∏–Ω—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n"
            "üí∞ –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π—Ç–µ —Å–≤–æ–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 50RUB –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—É—é –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –≤–∞—à–µ–º –±–æ—Ç–µ.\n\n"
            "üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≤–∞—à–µ–º –±–æ—Ç–µ –ø–æ–ª—É—á–∞—é—Ç 50RUB –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏."
        ),
        reply_markup=keyboards.how_add_bot()
    )


@dp.callback_query_handler(lambda call: call.data == 'how_add_bot')
async def how_add_bot(call: CallbackQuery):
    await call.message.answer(
        _(
            "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n\n"
            "1. –ó–∞–π—Ç–∏ –∫ @BotFather –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ /newbot.\n"
            "2. –í–≤–µ—Å—Ç–∏ –∏–º—è –±–æ—Ç–∞, –º–æ–∂–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
            "3. –í–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω –±–æ—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ª–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤–æ–±–æ–¥–µ–Ω –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ ¬´bot¬ª –∏–ª–∏ ¬´_bot¬ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: namemybot.\n"
            "4. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º. –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –Ω–∞–º –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n"
            "5. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n"
            "–ü—Ä–∏–º–µ—Ä —Ç–æ–∫–µ–Ω–∞ : 1234567890:RdAQ9ds8Itdxzq_Tf8JFpsPA9sqhfIS\n\n"
            "–ù–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω 3–º –ª–∏—Ü–∞–º."
        )
    )


@dp.callback_query_handler(lambda call: call.data == 'change_language')
async def change_language(call: CallbackQuery):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫/Choose language", reply_markup=keyboards.lang_select)


@dp.callback_query_handler(lambda call: call.data == 'change_nickname')
async def change_nickname(call: CallbackQuery):
    await states.ChangeNickname.enter_nickname.set()
    await call.message.answer(
        _("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º(–µ–≥–æ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ). –ú–∏–Ω.–¥–ª–∏–Ω–∞ 3 —Å–∏–º–≤–æ–ª–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 12 —Å–∏–º–≤–æ–ª–æ–≤. –ü—Ä–æ–±–µ–ª—ã, —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ—á–∏–µ —Å–∏–º–≤–æ–ª—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã!"),
        reply_markup=keyboards.cancel_button()
    )


@dp.message_handler(state=states.ChangeNickname.enter_nickname)
async def check_new_nickname(message: Message, state: FSMContext):
    await state.finish()
    error_message = _("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º. –ú–∏–Ω.–¥–ª–∏–Ω–∞ 3 —Å–∏–º–≤–æ–ª–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 12 —Å–∏–º–≤–æ–ª–æ–≤. –ü—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ—á–∏–µ —Å–∏–º–≤–æ–ª—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")

    if 3 <= len(message.text) <= 12:
        for i in message.text:
            if not i.isdigit() and not i.isalpha():
                return await message.answer(error_message)

        await change_nickname(message.chat.id, message.text)
        return await message.answer(_('–ù–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω'))

    await message.answer(error_message)


@dp.callback_query_handler(lambda call: call.data == 'cancel', state='*')
async def cancel_do(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.answer(_("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"))


@dp.message_handler(lambda msg: CHECKER_I18N(msg, '–û—Ç–∑—ã–≤—ã'))
async def checker(message: Message):
    c = await sync_to_async(list)(Comment.objects.all())
    last_page = math.ceil(len(c) / 4)
    t = _("–û—Ç–∑—ã–≤—ã") + " \(" + _("–°—Ç—Ä–∞–Ω–∏—Ü–∞") + f" 1/{last_page}\)\n\n"
    comments = await get_comments(1, c)

    for i in comments:
        t += f"üì¶ {markdown.italic(i.name_of_product)}\n"
        t += f"{markdown.bold(i.nickname)} `{markdown.text(i.date)}`\n"
        t += f"{markdown.bold(_('–û—Ü–µ–Ω–∫–∞'))}: {'‚≠êÔ∏è'*i.count_of_stars}\n"
        t += f"{markdown.italic(i.content)}\n\n"

    await message.answer(
        t,
        parse_mode='markdownv2',
        reply_markup=keyboards.comments_keyboard(1, last_page)
    )


@dp.callback_query_handler(lambda call: call.data.startswith('comments_page'))
async def get_reviews(call: CallbackQuery):
    current_page = int(call.data.split(":")[1])
    c = await sync_to_async(list)(Comment.objects.all())
    last_page = math.ceil(len(c) / 4)
    t = _("–û—Ç–∑—ã–≤—ã") + " \(" + _("–°—Ç—Ä–∞–Ω–∏—Ü–∞") + f" {current_page}/{last_page}\)\n\n"
    comments = await get_comments(current_page, c)

    for i in comments:
        t += f"üì¶ {markdown.italic(i.name_of_product)}\n"
        t += f"{markdown.bold(i.nickname)} `{markdown.text(i.date)}`\n"
        t += f"{markdown.bold(_('–û—Ü–µ–Ω–∫–∞'))}: {'‚≠êÔ∏è' * i.count_of_stars}\n"
        t += f"{markdown.italic(i.content)}\n\n"

    await call.message.edit_text(
        t,
        parse_mode='markdownv2',
        reply_markup=keyboards.comments_keyboard(current_page, last_page)
    )


@dp.message_handler(lambda msg: CHECKER_I18N(msg, '–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥'))
async def select_city(message: Message):
    await message.answer(_('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:'), reply_markup=await keyboards.select_city())


@dp.callback_query_handler(lambda call: call.data.startswith('city'))
async def get_city(call: CallbackQuery):
    city_id = call.data.split(":")[1]
    city = await City.objects.aget(pk=int(city_id))
    products = await sync_to_async(list)(Product.objects.filter(city=city))
    await call.message.answer(
        _("–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥") + f" *{city.name}*",
        parse_mode='markdown',
    )

    if not products:
        return await call.message.answer(_('–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏'))

    await call.message.answer(
        _('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞') + f'–≥.{city.name}',
        reply_markup=await keyboards.product_keyboard(products)
    )


@dp.callback_query_handler(lambda call: call.data.startswith('prod'))
async def get_desc_prod(call: CallbackQuery):
    prod_id = int(call.data.split(':')[1])
    prod = await Product.objects.aget(pk=prod_id)

    if prod.photo:
        with open(os.path.join(MEDIA_ROOT, str(prod.photo)), 'rb') as f:
            await call.message.answer_photo(f.read())

    count_of_comments = len(await sync_to_async(list)(Comment.objects.filter(name_of_product=prod.name)))
    buy_text = _("–ü–æ–∫—É–ø–æ–∫")
    rating_text = _("–†–µ–π—Ç–∏–Ω–≥")
    comments_text = _("–û—Ç–∑—ã–≤—ã")

    await call.message.answer(
        f'üç≠ _{prod.name}_\n\n'
        f'üéâ *{buy_text}*: {markdown.text(prod.count_of_buy)}\n'
        f'‚≠êÔ∏è *{rating_text}*: {markdown.text(prod.rating)}\n'
        f'üî• *{comments_text}*: {count_of_comments}\n\n'
        f'{prod.description or ""}',
        parse_mode='markdown',
        # reply_markup=keyboards.get_more_info(prod_id)
    )

    areas_text = ''
    areas_set = set()

    pcs = await sync_to_async(list)(prod.packs.all())
    for pack in pcs:
        for area in await sync_to_async(list)(pack.areas.all()):
            areas_set.add(area.name)

    d = {i: set() for i in areas_set}

    for pack in pcs:
        for area in await sync_to_async(list)(pack.areas.all()):
            d[area.name].add(pack.weight)

    for i in d:
        areas_text += f"*{i}*: {', '.join([f'{j}–≥—Ä' for j in d[i]])}\n"

    await call.message.answer(
        _('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω') + ':\n\n' + areas_text,
        parse_mode='markdown',
        reply_markup=keyboards.get_areas_keyboard(areas_set, prod_id)
    )


@dp.callback_query_handler(lambda call: call.data.startswith('area'))
async def get_packs(call: CallbackQuery):
    prod = await Product.objects.aget(pk=int(call.data.split(':')[2]))
    area_name = call.data.split(":")[1]
    packs = []
    area_id = 0

    for pack in await sync_to_async(list)(prod.packs.all()):
        for j in await sync_to_async(list)(pack.areas.all()):
            if j.name == area_name:
                area_id = j.pk
                packs.append(pack)

    for pack1 in range(len(packs) - 1):
        for pack2 in range(pack1+1, len(packs)):
            if packs[pack1].weight > packs[pack2].weight:
                packs[pack1], packs[pack2] = packs[pack2], packs[pack1]

    await call.message.answer(
        _("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞—Å–æ–≤–∫—É") + ":",
        reply_markup=keyboards.get_pack_keyboard(packs, prod.pk, get_course_usd(), area_id)
    )


@dp.callback_query_handler(lambda call: call.data.startswith('pack'))
async def get_pack(call: CallbackQuery):
    prod_id, pack_id, area_id = call.data.split(':')[1:]
    pack = await Pack.objects.aget(pk=pack_id)
    freshness = await sync_to_async(list)(pack.freshness.all())

    if freshness:
        return await call.message.answer(
            _("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–µ–∂–µ—Å—Ç—å") + ":",
            reply_markup=keyboards.get_freshness_keyboard(freshness, prod_id, pack_id, area_id)
        )

    type_of_buy = await sync_to_async(list)(pack.type_of_buy.all())

    await call.message.answer(
        _("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª–∞–¥–∞") + ":",
        reply_markup=keyboards.get_type_of_buy_keyboard(type_of_buy, prod_id, -1, pack_id, area_id)
    )


@dp.callback_query_handler(lambda call: call.data.startswith('fresh'))
async def get_type_of_buy(call: CallbackQuery):
    prod_id, pack_id, fresh_id, area_id = call.data.split(":")[1:]
    pack = await Pack.objects.aget(pk=pack_id)
    type_of_buy = await sync_to_async(list)(pack.type_of_buy.all())

    await call.message.answer(
        _("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª–∞–¥–∞") + ":",
        reply_markup=keyboards.get_type_of_buy_keyboard(type_of_buy, prod_id, fresh_id, pack_id, area_id)
    )


@dp.callback_query_handler(lambda call: call.data.startswith('final'))
async def get_user_check(call: CallbackQuery):
    prod_id, fresh_id, pack_id, area_id, type_of_buy_id = call.data.split(":")[1:]
    product = await Product.objects.select_related('city').aget(pk=int(prod_id))
    pack = await Pack.objects.aget(pk=int(pack_id))
    area = await Area.objects.aget(pk=area_id)

    prod_text = markdown.bold(_("–¢–æ–≤–∞—Ä")) + ": " + product.name + '\n'
    your_order = _('–í–∞—à –∑–∞–∫–∞–∑')
    location_text = markdown.bold(_("–õ–æ–∫–∞—Ü–∏—è")) + ": " + f'{product.city.name}, {area.name}\n'
    pack_text = markdown.bold(_("–§–∞—Å–æ–≤–∫–∞")) + f": {pack.weight}–≥—Ä"
    discount_amount = 0

    if fresh_id != -1:
        freshness = await Freshness.objects.aget(pk=int(fresh_id))
        pack_text += f", {freshness.name}"
        discount_amount = freshness.discount

    pack_text += "\n"

    type_of_buy = await TypeOfBuy.objects.aget(pk=int(type_of_buy_id))
    type_of_buy_text = markdown.bold(_("–¢–∏–ø –∫–ª–∞–¥–∞")) + f": {type_of_buy.name}\n"
    discount_text = markdown.bold(_("–ö—É–ø–æ–Ω")) + ": -\n\n"
    amount_rub = round(pack.price*((100-discount_amount)/100), 2)
    amount_text = markdown.bold(_("–°—Ç–æ–∏–º–æ—Å—Ç—å")) + (": üá∑üá∫ %.2f RUB\nüá∫üá∏ %.2f USD\n\n\n" % (amount_rub, round(amount_rub / get_course_usd(), 2))) + _("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã")

    await call.message.answer(
        f"{your_order}:\n\n"
        f"{prod_text}"
        f"{location_text}"
        f"{pack_text}"
        f"{type_of_buy_text}"
        f"{discount_text}"
        f"{amount_text}",
        parse_mode='markdown',
        reply_markup=keyboards.method_of_pays(amount_rub)
    )


@dp.callback_query_handler(lambda call: call.data.startswith('pay_money_from_balance'))
async def pay_money_from_balance(call: CallbackQuery):
    amount = float(call.data.split(":")[1])
    not_enough_money = _("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É") + '.'
    amount_order = _("–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞") + " " + str(amount) + "\n\n"
    add_balance = _("–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã")

    await call.message.answer(
        f"{not_enough_money} {amount_order} {add_balance}",
        reply_markup=keyboards.add_b()
    )


@dp.callback_query_handler(lambda call: call.data.startswith('pay_of_money'))
async def pay_of_money(call: CallbackQuery):
    type_pay, amount = call.data.split(":")[1:]
    order_text = _("–ó–∞–∫–∞–∑")
    type_add_balance = _("–ú–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
    to_pay = _("–ö—É–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å")
    help_text = _('–ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ—Å—Ç—É–ø–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 120 –º–∏–Ω—É—Ç, –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞!\n–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
    amount_text = _("–¢–æ—á–Ω–∞—è —Å—É–º–º–∞")
    only_crypt = _('–¢–û–õ–¨–ö–û –ü–û –ö–†–ò–ü–¢–û-–û–ü–õ–ê–¢–ê–ú!')

    if type_pay == 'bitcoin':
        p = await PaymentCrypto.objects.aget(title='BITCOIN')
        await call.message.answer(
            f"""`{order_text} #{random.randint(21_522, 45367)}, kaifshop`

*{type_add_balance}*: `Bitcoin`
*{to_pay}*: `{p.card}`
*{amount_text}*: `%.6f`

{help_text}: @suppds01  ({only_crypt})""" % get_btc_amount(float(amount)), parse_mode='markdown', reply_markup=keyboards.crypt_keyboard_payment('BITCOIN')
        )

    if type_pay == 'litecoin':
        p = await PaymentCrypto.objects.aget(title='LITECOIN')
        await call.message.answer(
            f"""`{order_text} #{random.randint(21_522, 45367)}, kaifshop`

*{type_add_balance}*: `Litecoin`
*{to_pay}*: `{p.card}`
*{amount_text}*: `%.6f`

{help_text}: @suppds01  ({only_crypt})""" % get_ltc_course(float(amount)), parse_mode='markdown', reply_markup=keyboards.crypt_keyboard_payment('LITECOIN')
        )

    if type_pay == 'card':
        card = await Exchange.objects.aget(name='–ö–∞—Ä—Ç–∞')
        warning_text = _("–ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ—Å—Ç—É–ø–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 60 –º–∏–Ω—É—Ç, –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞!\n–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂\" –Ω–∏–∂–µ.")
        await call.message.answer(
            f"""–ó–∞–∫–∞–∑ CB-{random.randint(2312, 4562)} ({random.randint(16_276_887, 25_236_512)})

*{type_add_balance}*: `üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É`
*{to_pay}*: `{card.card}`
*{amount_text}*: `{int(float(amount)*((card.percent+100)/100))}`

{warning_text}""",
            parse_mode='markdown',
            reply_markup=keyboards.card_add()
        )


@dp.callback_query_handler(lambda call: call.data == 'check_payment_card')
async def check_payment_card(call: CallbackQuery):
    tg_help = "@supdds01"
    await call.message.answer(_("""–ü—Äo–≤–µ—Ä—è–µ–º –≤–∞—à –ø–ª–∞—Ç–µ–∂... –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ 5-20 –º–∏–Ω—É—Ç.

–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –æ–±–º–µ–Ω–æ–º —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º""") + f" {tg_help}")


@dp.callback_query_handler(lambda call: call.data == 'cancel_payment')
async def cancel_payment(call: CallbackQuery):
    await call.message.answer(_("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É?"), reply_markup=keyboards.cancel_exc())


@dp.callback_query_handler(lambda call: call.data == 'cancel_exc')
async def cancel_exc(call: CallbackQuery):
    await call.message.answer(_("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"))


@dp.callback_query_handler(lambda call: call.data.startswith('qr_code'))
async def get_qr(call: CallbackQuery):
    payment = await PaymentCrypto.objects.aget(title=call.data.split(':')[1])

    await call.message.answer_photo(
        caption=_('–ü—Ä–æ—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∏ —Å—É–º–º—ã –≤ –∫–æ—à–µ–ª—å–∫–µ –∏–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ.'),
        photo=open(os.path.join(MEDIA_ROOT, str(payment.qr_code_image)), 'rb').read()
    )


@sync_to_async
def get_comments(page_num: int, objs):
    return objs[page_num*4-4:4*page_num]


@sync_to_async
def change_lang(user_id, lang):
    TelegramUser.objects.filter(user_id=user_id).update(lang=lang)


@sync_to_async
def change_nickname(user_id, nickname):
    TelegramUser.objects.filter(user_id=user_id).update(nickname=nickname)


class Command(BaseCommand):
    help = 'not help'

    def handle(self, *args, **options):
        executor.Executor(dp).start_polling()
